name: Four-Stage Workflow
on: [push]

permissions:
      id-token: write
      contents: read

jobs:
  terraform_stage_1:
    runs-on: ubuntu-latest
    #if: github.event.workflow_run.conclusion == 'success' || github.event.workflow_run.conclusion == 'skipped'

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 0.15.5  
          
      - name: login to azure 
        uses: azure/login@v1
        with:
          creds: '{"clientId":"${{ secrets.ARM_CLIENT_ID }}","clientSecret":"${{ secrets.ARM_CLIENT_SECRET }}","subscriptionId":"${{ secrets.ARM_SUBSCRIPTION_ID }}","tenantId":"${{ secrets.ARM_TENANT_ID }}"}'
          allow-no-subscriptions: true
        env:
            client_id: ${{ secrets.CLIENT_ID }}
            tenant_id: ${{ secrets.TENANT_ID }}
            subscription_id: ${{ secrets.SUBSCRIPTION_ID }}
            
      - name: Execute Terraform Stage 1
        env:
         TF_VAR_client_id: ${{ secrets.ARM_CLIENT_ID }}
         TF_VAR_client_secret: ${{ secrets.ARM_CLIENT_SECRET }}
         TF_VAR_subscription_id: ${{ secrets.ARM_SUBSCRIPTION_ID }}
         TF_VAR_tenant_id: ${{ secrets.ARM_TENANT_ID }}
         TF_VAR_vmpass: ${{ secrets.TF_VAR_VMPASS }}
         #creds: '{client_id:"${{ secrets.CLIENT_ID }}","client_secret:"${{ secrets.CLIENT_SECRET }}",subscription_id:"${{ secrets.SUBSCRIPTION_ID }}","tenantId":"${{ secrets.TENANT_ID }}"}'
        run: |
          cd azuretask/stageone
          terraform init -backend-config="subscription_id=${{ secrets.ARM_SUBSCRIPTION_ID }}" -backend-config="client_id=${{ secrets.ARM_CLIENT_ID }}" -backend-config="tenant_id=${{ secrets.ARM_TENANT_ID }}" -backend-config="client_secret=${{ secrets.ARM_CLIENT_SECRET }}"
          terraform apply -auto-approve

  packer_stage_2:
    runs-on: windows-latest
    #if: github.event.workflow_run.conclusion == 'success' || github.event.workflow_run.conclusion == 'skipped'
    needs: terraform_stage_1

    steps:
      #- name: Checkout code
        #uses: actions/checkout@v2
        #with:
          #path: azuretask/stagetwo
      
      #- name: azure login
        #uses: azure/login@v1
        #with:
          #creds: '{"clientId":"${{ secrets.ARM_CLIENT_ID }}","clientSecret":"${{ secrets.ARM_CLIENT_SECRET }}","subscriptionId":"${{ secrets.ARM_SUBSCRIPTION_ID }}","tenantId":"${{ secrets.ARM_TENANT_ID }}"}'

      #- name: change directory  
        #run: |
          #cd azuretask/stagetwo
        #env:
            #ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
            #ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
            #ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
            #ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}

      - name: Setup Packer
        shell: powershell
        run: |
          #wget https://releases.hashicorp.com/packer/1.9.4/packer_1.9.4_linux_amd64.zip
          #unzip packer_1.9.4_linux_amd64.zip
          #sudo mv packer /usr/local/bin/
          #rm packer_1.9.4_linux_amd64.zip
          # Define Packer version
          $packerVersion = "1.9.4"
    
          # Define download URL
          $packerUrl = "https://releases.hashicorp.com/packer/$($packerVersion)/packer_$($packerVersion)_windows_amd64.zip"
    
          # Download and unzip Packer
          Invoke-WebRequest -Uri $packerUrl -OutFile packer.zip
          Expand-Archive -Path packer.zip -DestinationPath $Env:ProgramFiles\packer -Force
          Remove-Item -Path packer.zip -Force
    
          # Add Packer to the system PATH
          $env:Path += ";$($Env:ProgramFiles)\packer"

          # Check Packer version
          packer --version

      - name: Execute Packer Image Build
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        run: |
          #cd azuretask/stagetwo
          pwd
          packer plugins install github.com/hashicorp/azure
          #packer hcl2_upgrade /home/runner/work/devops-projects/devops-projects/azuretask/stagetwo/azurepacker.json
          packer hcl12_upgrade D:\a\devops-projects\devops-projects\azuretask\stagetwo\azurepacker.json
          packer build D:\a\devops-projects\devops-projects\azuretask\stagetwo\azurepacker.json

  terraform_stage_3:
    runs-on: ubuntu-latest
    #if: github.event.workflow_run.conclusion == 'success' || github.event.workflow_run.conclusion == 'skipped'
    needs: packer_stage_2

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 0.15.5

      - name: Execute Terraform Stage 3
        run: |
          cd azuretask/stagethree
          terraform init
          terraform import azurerm_resource_group.my-f23-rg /subscriptions/6ea6f9f7-0a28-45a1-b63d-c045d73026f2/resourceGroups/my-f23-rg
          terraform apply -auto-approve

  azure_cli_stage_4:
    runs-on: ubuntu-latest
    #if: github.event.workflow_run.conclusion == 'success' || github.event.workflow_run.conclusion == 'skipped'
    needs: terraform_stage_3

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Azure CLI
        uses: azure/setup-azure-cli@v1
        with:
          azcliversion: latest

      - name: Execute Azure CLI Command
        run: |
          az login --service-principal --tenant ${{ secrets.TENANT_ID }} --client-id ${{ secrets.CLIENT_ID }} --secret ${{ secrets.CLIENT_SECRET }}
          az vmss run-command invoke --name your_vmss_name --resource-group your_resource_group --command-id RunShellScript --scripts @scripts/your_powershell_script.ps1
